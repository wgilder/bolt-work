lookup_options:
  awskit::tags:
    merge: deep

awskit::create_master::instance_type: "t2.large"
awskit::create_linux_node::instance_type: "t2.micro"
awskit::create_windows_node::instance_type: "t2.small"
awskit::create_discovery::instance_type: "t2.medium"
awskit::create_discovery_nodes::instance_type: "t2.micro"
awskit::create_windc::instance_type: "t2.small"
awskit::create_wsus::instance_type: "t2.medium"
awskit::create_cd4pe::instance_type: "t2.xlarge"
awskit::windows_domain::dn: "DC=awskit,DC=local"
awskit::windows_domain::localadminpw: "PuppetD3vh0ps!"
awskit::windows_domain::domainname: "awskit.local"
awskit::windows_domain::domainnbname: "awskit"
awskit::windows_domain::ntdspath: 'C:\\NTDS'
awskit::windows_domain::safemodepw: "PuppetD3vh0ps!"
awskit::windows_domain::join_user: "Administrator"
awskit::windows_domain::join_password: "PuppetD3vh0ps!"

awskit::agent_sc_name: "%{facts.user}-awskit-agent"
awskit::master_sc_name: "%{facts.user}-awskit-master"
awskit::disco_sc_name: "%{facts.user}-awskit-disco"
awskit::windc_sc_name: "%{facts.user}-awskit-windc"
awskit::wsus_sc_name: "%{facts.user}-awskit-wsus"
awskit::cd4pe_sc_name: "%{facts.user}-awskit-cd4pe"

awskit::create_master::instance_name: "%{facts.user}-awskit-pm"
awskit::create_linux_node::instance_name: "%{facts.user}-awskit-linux"
awskit::create_windows_node::instance_name: "%{facts.user}-awskit-windows"
awskit::create_discovery::instance_name: "%{facts.user}-awskit-disco"
awskit::create_discoverynodes::instance_name: "%{facts.user}-awskit-disconode"
awskit::create_windc::instance_name: "%{facts.user}-awskit-windc"
awskit::create_wsus::instance_name: "%{facts.user}-awskit-wsus"
awskit::create_cd4pe::instance_name: "%{facts.user}-awskit-cd4pe"

awskit::tags:
  description: "SE Demo Infrastructure"
  department: "TSE"
  project: "SE Demos"
  lifetime: 10w
  #termination_date: '2018-07-19T11:03:05.626507+00:00'
  Schedule: "-21:00"

awskit::vpc: "default"

awskit::create_linux_node::user_data: |
  #! /bin/bash
  echo "<%= $awskit::master_ip %> <%= $awskit::master_name %> master" >> /etc/hosts
  install_args=""
  <% unless $run_agent == true { -%>
  $install_args=" --puppet-service-ensure stopped --puppet-service-enable false"
  <% } -%>
  <% if $role != "" { -%>
  role_args="extension_requests:pp_role=<%= $role %>"
  <% } -%>
  <% if $environment != "" { -%>
  env_args="extension_requests:pp_environment=<%= $environment %>"
  <% } -%>
  curl -k https://<%= $awskit::master_name %>:8140/packages/current/install.bash \
  | bash -s agent:certname="<%= $name %>" \
  $install_args $role_args $env_args

# Adding Useful install packages here such as chocolately, npp++, 7zip and procexp tools for installation.
awskit::create_windows_node::user_data: |
  <powershell>
  $hosts = "$env:windir\System32\drivers\etc\hosts"
  "<%= $awskit::master_ip %> <%= $awskit::master_name %> master" | Add-Content -PassThru $hosts;
  "<%= $awskit::wsus_ip %> wsus.inf.puppet.vm wsus" | Add-Content -PassThru $hosts;
  [Net.ServicePointManager]::ServerCertificateValidationCallback = {$true}; 
  net user admin "Devops!" /add ;
  net localgroup Administrators admin /add ;
  wmic USERACCOUNT WHERE "Name='admin'" set PasswordExpires=FALSE ;
  net user Administrator "Devops!" ;
  wmic USERACCOUNT WHERE "Name='Administrator'" set PasswordExpires=FALSE ;
  Set-ExecutionPolicy Bypass -Scope Process -Force;
  iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'));
  choco install --yes notepadplusplus.install 7zip.install procexp ;
  [Net.ServicePointManager]::ServerCertificateValidationCallback = {$true}; 
  $webClient = New-Object System.Net.WebClient; 
  $webClient.DownloadFile('https://<%= $awskit::master_name %>:8140/packages/current/install.ps1', 'install.ps1'); 
  <% if $run_agent == true { -%>
  .\install.ps1 main:certname="<%= $name %>"
  <% } else { -%>
  .\install.ps1 main:certname="<%= $name %>" -PuppetServiceEnsure stopped -PuppetServiceEnable false
  <% } -%>
  winrm quickconfig -force
  </powershell>

awskit::create_linux_node::count: 2
awskit::create_windows_node::count: 2

awskit::create_discovery::user_data: |
  #! /bin/bash
  #hostname=$(curl http://169.254.169.254/latest/meta-data/public-hostname)
  yum install -y yum-utils device-mapper-persistent-data lvm2
  yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
  yum install -y docker-ce
  systemctl enable docker
  systemctl start docker
  curl -o ~/puppet-discovery https://storage.googleapis.com/chvwcgv0lwrpc2nvdmvyes1jbgkk/production/latest/linux-amd64/puppet-discovery
  chmod a+x ~/puppet-discovery
  ~/puppet-discovery demo

awskit::create_discovery_nodes::user_data: |
  #! /bin/bash
  echo "<%= $awskit::master_ip %> master.inf.puppet.vm master" >> /etc/hosts

# doesn't work since master doesn't run cloud-init
# awskit::create_master::user_data: |
#   #! /bin/bash
#   sleep 120 # give time for startup
#   cd /tmp
#   git clone <%= $control_repo %> control-repo
#   cd control-repo
#   git remote add gogs git@localhost:puppet/control-repo.git
#   git push gogs production
#   <% $gogs_ssh_keys.each |$title| { -%>
#   curl -u puppet:puppetlabs -X POST -H "Content-Type: application/json" -d \
#   '{"title": "<%= $title %>", "key": "<%= $gogs_ssh_keys[$title] %>"}'
#   <% } -%>
#   <% unless $ssh_key =~ Undef { -%>
#   echo "<%= $ssh_key %>" >> /root/.ssh/authorized_keys
#   <% } -%>

awskit::create_master::control_repo: https://github.com/puppetlabs-seteam/control-repo-awskit

awskit::create_windc::user_data: |
  <powershell>
  $hosts = "$env:windir\System32\drivers\etc\hosts"
  "<%= $awskit::master_ip %> master.inf.puppet.vm master" | Add-Content -PassThru $hosts
  [Net.ServicePointManager]::ServerCertificateValidationCallback = {$true}; 
  $webClient = New-Object System.Net.WebClient; 
  $webClient.DownloadFile('https://master:8140/packages/current/install.ps1', 'install.ps1'); 
  .\install.ps1 main:certname="windchops-1.inf.puppet.vm"
  winrm quickconfig -force
  </powershell>

awskit::create_wsus::user_data: |
  <powershell>
  $hosts = "$env:windir\System32\drivers\etc\hosts"
  "<%= $awskit::master_ip %> master.inf.puppet.vm master" | Add-Content -PassThru $hosts
  [Net.ServicePointManager]::ServerCertificateValidationCallback = {$true}; 
  net user admin "Devops!" /add ;
  net localgroup Administrators admin /add ;
  wmic USERACCOUNT WHERE "Name='admin'" set PasswordExpires=FALSE ;
  net user Administrator "Devops!" ;
  wmic USERACCOUNT WHERE "Name='Administrator'" set PasswordExpires=FALSE ;
  Set-ExecutionPolicy Bypass -Scope Process -Force;
  Install-WindowsFeature -Name UpdateServices -IncludeManagementTools;
  New-Item -Path C: -Name WSUS -ItemType Directory;
  & "C:\Program Files\Update Services\Tools\wsusutil.exe" postinstall CONTENT_DIR=C:\WSUS
  iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
  choco install --yes notepadplusplus.install 7zip.install procexp
  # Further WSUS Configuration
  $wsus = Get-WSUSServer;
  $wsusConfig = $wsus.GetConfiguration();
  # Set to download updates from Microsoft Updates
  Set-WsusServerSynchronization â€“SyncFromMU;
  # Set Update Languages to English and save configuration settings
  $wsusConfig.AllUpdateLanguagesEnabled = $false;
  $wsusConfig.SetEnabledUpdateLanguages("en");
  $wsusConfig.Save();
  # Get WSUS Subscription and perform initial synchronization to get latest categories
  $subscription = $wsus.GetSubscription();
  $subscription.StartSynchronizationForCategoryOnly();
  While ($subscription.GetSynchronizationStatus() -ne 'NotProcessing') { Write-Host "." -NoNewline; Start-Sleep -Seconds 5 ;};
  Write-Host "Sync is done.";
  # Configure the Platforms that we want WSUS to receive updates
  Get-WsusProduct | where-Object { $_.Product.Title -in ('Windows 10', 'Windows Server 2016','Windows Server 2012 R2') } | Set-WsusProduct;
  # Configure the Classifications
  Get-WsusClassification | Where-Object { $_.Classification.Title -in ('Update Rollups', 'Security Updates', 'Critical Updates', 'Service Packs', 'Updates') } | Set-WsusClassification;
  # Configure Synchronizations
  $subscription.SynchronizeAutomatically=$true;
  # Set synchronization scheduled for midnight each night
  $subscription.SynchronizeAutomaticallyTimeOfDay= (New-TimeSpan -Hours 0);
  $subscription.NumberOfSynchronizationsPerDay=1;
  $subscription.Save();
  # Kick off a synchronization
  $subscription.StartSynchronization();
  winrm quickconfig -force
  </powershell>

awskit::amis:
  us-west-2: # Oregon
    pm: ami-0cc4fd611a2b7b399 # tse-master-vmware-2018.1.0-v0.0.9d.ova
    # pm: ami-0dfaef6ffe4e87622 # ttse-master-vmware-2018.1.0-v0.0.9.ova
    centos: ami-b63ae0ce # CentOS Linux 7 x86_64 HVM EBS 1708_11.01-b7ee8a69-ee97-4a49-9e68-afaee216db2e-ami-95096eef.4
    windows: ami-ef9a0e97 #  Windows_Server-2016-English-Full-Base-2018.03.06
    discovery: ami-ef9a0e97 #  Windows_Server-2016-English-Full-Base-2018.03.06
    windc: ami-ef9a0e97 #  Windows_Server-2016-English-Full-Base-2018.03.06
    wsus: ami-ef9a0e97 #  Windows_Server-2016-English-Full-Base-2018.03.06
  us-east-1: # N. Virginia
    pm: ami-059be705180dcab3e # tse-master-vmware-2018.1.4-v0.0.9d.ova
    centos: ami-02e98f78 # CentOS Linux 7 x86_64 HVM EBS 1708_11.01-b7ee8a69-ee97-4a49-9e68-afaee216db2e-ami-95096eef.4
    windows: ami-cab14db7 #  Windows_Server-2016-English-Full-Base-2018.03.06
    discovery: ami-cab14db7 #  Windows_Server-2016-English-Full-Base-2018.03.06
    windc: ami-cab14db7 #  Windows_Server-2016-English-Full-Base-2018.03.06
    wsus: ami-cab14db7 #  Windows_Server-2016-English-Full-Base-2018.03.06
  eu-west-2: # London
    pm: ami-07f4b23fb089b0ef6 # tse-master-vmware-2018.1.4-v0.0.9d.ova
    #    pm:        ami-9604e0f1 # tse-master-vmware-2017.3.5-v0.0.8.ova
    centos: ami-ee6a718a # CentOS Linux 7 x86_64 HVM EBS
    windows: ami-0fe7fd8b230322c20 # Windows_Server-2016-English-Full-Base-2018.03.06
    discovery: ami-ee6a718a # CentOS Linux 7 x86_64 HVM EBS
    windc: ami-8bee09ec # Windows_Server-2016-English-Full-Base-2018.03.06
    wsus: ami-8bee09ec # Windows_Server-2016-English-Full-Base-2018.03.06
  eu-west-3: # Paris
    pm: ami-de73c5a3
    centos: ami-0c60d771 # CentOS Linux 7 x86_64 HVM EBS 1708_11.01-b7ee8a69-ee97-4a49-9e68-afaee216db2e-ami-95096eef.4
    discovery: ami-0c60d771 # CentOS Linux 7 x86_64 HVM EBS 1708_11.01-b7ee8a69-ee97-4a49-9e68-afaee216db2e-ami-95096eef.4
  eu-central-1: # Frankfurt
    pm: ami-86761be9
  ap-southeast-2: # Sydney
    pm: ami-a6995fc4
  ap-southeast-1: # Singapore
    pm: ami-3b93db47
